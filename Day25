class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def isValidBST(root):
    def validate(node, min_val, max_val):
        if not node:
            return True
        if not (min_val < node.val < max_val):
            return False
        return (validate(node.left, min_val, node.val) and
                validate(node.right, node.val, max_val))
    return validate(root, float('-inf'), float('inf'))

from collections import deque
def build_tree(values):
    if not values:
        return None
    root = TreeNode(values[0])
    q = deque([root])
    i = 1
    while q and i < len(values):
        node = q.popleft()
        if i < len(values) and values[i] is not None:
            node.left = TreeNode(values[i])
            q.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i]) 
            q.append(node.right)
        i += 1
    return root


root1 = build_tree([2, 1, 3])
print(isValidBST(root1))  

root2 = build_tree([5, 1, 4, None, None, 3, 6])
print(isValidBST(root2)) 

root3 = build_tree([10, 5, 15, None, None, 6, 20])
print(isValidBST(root3))  
